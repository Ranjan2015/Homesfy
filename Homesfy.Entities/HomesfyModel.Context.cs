//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Homesfy.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class admin_homesfyEntities : DbContext
    {
        public admin_homesfyEntities()
            : base("name=admin_homesfyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Builder> Builders { get; set; }
        public virtual DbSet<Builder_EscalationMatrix> Builder_EscalationMatrix { get; set; }
        public virtual DbSet<BuilderProjectConfig> BuilderProjectConfigs { get; set; }
        public virtual DbSet<BuilderProjectFloorPlan> BuilderProjectFloorPlans { get; set; }
        public virtual DbSet<BuilderProject> BuilderProjects { get; set; }
        public virtual DbSet<BuilderProjectSubConfig> BuilderProjectSubConfigs { get; set; }
        public virtual DbSet<BuilderProjExternalAmenity> BuilderProjExternalAmenities { get; set; }
        public virtual DbSet<BuilderProjGallery> BuilderProjGalleries { get; set; }
        public virtual DbSet<BuilderProjInternalAmenity> BuilderProjInternalAmenities { get; set; }
        public virtual DbSet<BuildingGallery> BuildingGalleries { get; set; }
        public virtual DbSet<BuildingPrefId> BuildingPrefIds { get; set; }
        public virtual DbSet<BuyerProfile> BuyerProfiles { get; set; }
        public virtual DbSet<CrmLeadDetail> CrmLeadDetails { get; set; }
        public virtual DbSet<CrmLeadFeedback> CrmLeadFeedbacks { get; set; }
        public virtual DbSet<GreatPlaceGallery> GreatPlaceGalleries { get; set; }
        public virtual DbSet<InDividualBasicProfile> InDividualBasicProfiles { get; set; }
        public virtual DbSet<LocalityBlock> LocalityBlocks { get; set; }
        public virtual DbSet<LocalityBlockGallery> LocalityBlockGalleries { get; set; }
        public virtual DbSet<LocalityDetail> LocalityDetails { get; set; }
        public virtual DbSet<LocalityDetailsCommute> LocalityDetailsCommutes { get; set; }
        public virtual DbSet<LocalityGallery> LocalityGalleries { get; set; }
        public virtual DbSet<LocalityGreatPlace> LocalityGreatPlaces { get; set; }
        public virtual DbSet<LocalityKeyHighLight> LocalityKeyHighLights { get; set; }
        public virtual DbSet<LocalitySuggestion> LocalitySuggestions { get; set; }
        public virtual DbSet<LocalityTag> LocalityTags { get; set; }
        public virtual DbSet<LocalityTripRequest> LocalityTripRequests { get; set; }
        public virtual DbSet<mBuilderProject> mBuilderProjects { get; set; }
        public virtual DbSet<mBuilding> mBuildings { get; set; }
        public virtual DbSet<mCategoryOfExternalAmenity> mCategoryOfExternalAmenities { get; set; }
        public virtual DbSet<mCity> mCities { get; set; }
        public virtual DbSet<mCountry> mCountries { get; set; }
        public virtual DbSet<mCrmDepartment> mCrmDepartments { get; set; }
        public virtual DbSet<mCrmLeadPurpose> mCrmLeadPurposes { get; set; }
        public virtual DbSet<mCrmLeadSource> mCrmLeadSources { get; set; }
        public virtual DbSet<mInternalAmenity> mInternalAmenities { get; set; }
        public virtual DbSet<mLocality> mLocalities { get; set; }
        public virtual DbSet<mNeighbourHoodTag> mNeighbourHoodTags { get; set; }
        public virtual DbSet<mPriceRange> mPriceRanges { get; set; }
        public virtual DbSet<mPropConfig> mPropConfigs { get; set; }
        public virtual DbSet<mPropertyCategory> mPropertyCategories { get; set; }
        public virtual DbSet<mSociety> mSocieties { get; set; }
        public virtual DbSet<mSocietyGallery> mSocietyGalleries { get; set; }
        public virtual DbSet<mState> mStates { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Prop_List> Prop_List { get; set; }
        public virtual DbSet<Prop_Review> Prop_Review { get; set; }
        public virtual DbSet<PropBlog> PropBlogs { get; set; }
        public virtual DbSet<SecurityQuestionMaster> SecurityQuestionMasters { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<UserCredential> UserCredentials { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<PropscoutProfile> PropscoutProfiles { get; set; }
        public virtual DbSet<PropscoutWorkArea> PropscoutWorkAreas { get; set; }
        public virtual DbSet<UserTagPreference> UserTagPreferences { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
